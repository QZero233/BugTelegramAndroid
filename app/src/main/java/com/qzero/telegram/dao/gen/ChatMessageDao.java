package com.qzero.telegram.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qzero.telegram.dao.entity.ChatMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "chat_message".
*/
public class ChatMessageDao extends AbstractDao<ChatMessage, String> {

    public static final String TABLENAME = "chat_message";

    /**
     * Properties of entity ChatMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MessageId = new Property(0, String.class, "messageId", true, "messageId");
        public final static Property SenderUserName = new Property(1, String.class, "senderUserName", false, "senderUserName");
        public final static Property SessionId = new Property(2, String.class, "sessionId", false, "sessionId");
        public final static Property SendTime = new Property(3, long.class, "sendTime", false, "sendTime");
        public final static Property MessageStatus = new Property(4, String.class, "messageStatus", false, "messageStatus");
    }


    public ChatMessageDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"chat_message\" (" + //
                "\"messageId\" TEXT PRIMARY KEY NOT NULL ," + // 0: messageId
                "\"senderUserName\" TEXT," + // 1: senderUserName
                "\"sessionId\" TEXT," + // 2: sessionId
                "\"sendTime\" INTEGER NOT NULL ," + // 3: sendTime
                "\"messageStatus\" TEXT);"); // 4: messageStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"chat_message\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatMessage entity) {
        stmt.clearBindings();
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(1, messageId);
        }
 
        String senderUserName = entity.getSenderUserName();
        if (senderUserName != null) {
            stmt.bindString(2, senderUserName);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(3, sessionId);
        }
        stmt.bindLong(4, entity.getSendTime());
 
        String messageStatus = entity.getMessageStatus();
        if (messageStatus != null) {
            stmt.bindString(5, messageStatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatMessage entity) {
        stmt.clearBindings();
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(1, messageId);
        }
 
        String senderUserName = entity.getSenderUserName();
        if (senderUserName != null) {
            stmt.bindString(2, senderUserName);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(3, sessionId);
        }
        stmt.bindLong(4, entity.getSendTime());
 
        String messageStatus = entity.getMessageStatus();
        if (messageStatus != null) {
            stmt.bindString(5, messageStatus);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ChatMessage readEntity(Cursor cursor, int offset) {
        ChatMessage entity = new ChatMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // messageId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // senderUserName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sessionId
            cursor.getLong(offset + 3), // sendTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // messageStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatMessage entity, int offset) {
        entity.setMessageId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSenderUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSessionId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSendTime(cursor.getLong(offset + 3));
        entity.setMessageStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ChatMessage entity, long rowId) {
        return entity.getMessageId();
    }
    
    @Override
    public String getKey(ChatMessage entity) {
        if(entity != null) {
            return entity.getMessageId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatMessage entity) {
        return entity.getMessageId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
