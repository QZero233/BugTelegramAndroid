package com.qzero.telegram.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qzero.telegram.dao.entity.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, String> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserName = new Property(0, String.class, "userName", true, "userName");
        public final static Property AccountStatus = new Property(1, int.class, "accountStatus", false, "accountStatus");
        public final static Property Motto = new Property(2, String.class, "motto", false, "motto");
        public final static Property GroupLevel = new Property(3, int.class, "groupLevel", false, "groupLevel");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"userName\" TEXT PRIMARY KEY NOT NULL ," + // 0: userName
                "\"accountStatus\" INTEGER NOT NULL ," + // 1: accountStatus
                "\"motto\" TEXT," + // 2: motto
                "\"groupLevel\" INTEGER NOT NULL );"); // 3: groupLevel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(1, userName);
        }
        stmt.bindLong(2, entity.getAccountStatus());
 
        String motto = entity.getMotto();
        if (motto != null) {
            stmt.bindString(3, motto);
        }
        stmt.bindLong(4, entity.getGroupLevel());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(1, userName);
        }
        stmt.bindLong(2, entity.getAccountStatus());
 
        String motto = entity.getMotto();
        if (motto != null) {
            stmt.bindString(3, motto);
        }
        stmt.bindLong(4, entity.getGroupLevel());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userName
            cursor.getInt(offset + 1), // accountStatus
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // motto
            cursor.getInt(offset + 3) // groupLevel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setUserName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAccountStatus(cursor.getInt(offset + 1));
        entity.setMotto(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroupLevel(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserInfo entity, long rowId) {
        return entity.getUserName();
    }
    
    @Override
    public String getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getUserName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getUserName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
