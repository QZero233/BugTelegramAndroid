package com.qzero.telegram.dao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.qzero.telegram.dao.entity.ChatMember;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MEMBER".
*/
public class ChatMemberDao extends AbstractDao<ChatMember, Long> {

    public static final String TABLENAME = "CHAT_MEMBER";

    /**
     * Properties of entity ChatMember.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ChatMemberId = new Property(0, Long.class, "chatMemberId", true, "chatMemberId");
        public final static Property SessionId = new Property(1, String.class, "sessionId", false, "sessionId");
        public final static Property UserName = new Property(2, String.class, "userName", false, "userName");
        public final static Property Level = new Property(3, int.class, "level", false, "level");
    }

    private Query<ChatMember> chatSession_ChatMembersQuery;

    public ChatMemberDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMemberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MEMBER\" (" + //
                "\"chatMemberId\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: chatMemberId
                "\"sessionId\" TEXT," + // 1: sessionId
                "\"userName\" TEXT," + // 2: userName
                "\"level\" INTEGER NOT NULL );"); // 3: level
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MEMBER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatMember entity) {
        stmt.clearBindings();
 
        Long chatMemberId = entity.getChatMemberId();
        if (chatMemberId != null) {
            stmt.bindLong(1, chatMemberId);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(2, sessionId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
        stmt.bindLong(4, entity.getLevel());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatMember entity) {
        stmt.clearBindings();
 
        Long chatMemberId = entity.getChatMemberId();
        if (chatMemberId != null) {
            stmt.bindLong(1, chatMemberId);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(2, sessionId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
        stmt.bindLong(4, entity.getLevel());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatMember readEntity(Cursor cursor, int offset) {
        ChatMember entity = new ChatMember( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // chatMemberId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sessionId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.getInt(offset + 3) // level
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatMember entity, int offset) {
        entity.setChatMemberId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSessionId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLevel(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatMember entity, long rowId) {
        entity.setChatMemberId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatMember entity) {
        if(entity != null) {
            return entity.getChatMemberId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatMember entity) {
        return entity.getChatMemberId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "chatMembers" to-many relationship of ChatSession. */
    public List<ChatMember> _queryChatSession_ChatMembers(String sessionId) {
        synchronized (this) {
            if (chatSession_ChatMembersQuery == null) {
                QueryBuilder<ChatMember> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SessionId.eq(null));
                chatSession_ChatMembersQuery = queryBuilder.build();
            }
        }
        Query<ChatMember> query = chatSession_ChatMembersQuery.forCurrentThread();
        query.setParameter(0, sessionId);
        return query.list();
    }

}
