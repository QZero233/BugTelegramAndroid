package com.qzero.telegram.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qzero.telegram.dao.entity.FileTransportTask;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "file_transport_task".
*/
public class FileTransportTaskDao extends AbstractDao<FileTransportTask, String> {

    public static final String TABLENAME = "file_transport_task";

    /**
     * Properties of entity FileTransportTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ResourceId = new Property(0, String.class, "resourceId", true, "resourceId");
        public final static Property FileName = new Property(1, String.class, "fileName", false, "resourceId");
        public final static Property FileLength = new Property(2, long.class, "fileLength", false, "resourceId");
        public final static Property BlockLength = new Property(3, long.class, "blockLength", false, "resourceId");
        public final static Property FullPath = new Property(4, String.class, "fullPath", false, "fullPath");
    }


    public FileTransportTaskDao(DaoConfig config) {
        super(config);
    }
    
    public FileTransportTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"file_transport_task\" (" + //
                "\"resourceId\" TEXT PRIMARY KEY NOT NULL ," + // 0: resourceId
                "\"resourceId\" TEXT," + // 1: fileName
                "\"resourceId\" INTEGER NOT NULL ," + // 2: fileLength
                "\"resourceId\" INTEGER NOT NULL ," + // 3: blockLength
                "\"fullPath\" TEXT);"); // 4: fullPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"file_transport_task\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileTransportTask entity) {
        stmt.clearBindings();
 
        String resourceId = entity.getResourceId();
        if (resourceId != null) {
            stmt.bindString(1, resourceId);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(2, fileName);
        }
        stmt.bindLong(3, entity.getFileLength());
        stmt.bindLong(4, entity.getBlockLength());
 
        String fullPath = entity.getFullPath();
        if (fullPath != null) {
            stmt.bindString(5, fullPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileTransportTask entity) {
        stmt.clearBindings();
 
        String resourceId = entity.getResourceId();
        if (resourceId != null) {
            stmt.bindString(1, resourceId);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(2, fileName);
        }
        stmt.bindLong(3, entity.getFileLength());
        stmt.bindLong(4, entity.getBlockLength());
 
        String fullPath = entity.getFullPath();
        if (fullPath != null) {
            stmt.bindString(5, fullPath);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FileTransportTask readEntity(Cursor cursor, int offset) {
        FileTransportTask entity = new FileTransportTask( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // resourceId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fileName
            cursor.getLong(offset + 2), // fileLength
            cursor.getLong(offset + 3), // blockLength
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // fullPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileTransportTask entity, int offset) {
        entity.setResourceId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFileName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFileLength(cursor.getLong(offset + 2));
        entity.setBlockLength(cursor.getLong(offset + 3));
        entity.setFullPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FileTransportTask entity, long rowId) {
        return entity.getResourceId();
    }
    
    @Override
    public String getKey(FileTransportTask entity) {
        if(entity != null) {
            return entity.getResourceId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FileTransportTask entity) {
        return entity.getResourceId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
